Leet Code : 674

LOngest Continious Increasing subsequence

674. Longest Continuous Increasing Subsequence
Solved
Easy
Topics
Companies
Given an unsorted array of integers , return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.nums

A continuous increasing subsequence is defined by two indices and () such that it is and for each , .lrl < r[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]l <= i < rnums[i] < nums[i + 1]

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
Example 2:

Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109


class Solution {
    public int findLengthOfLCIS(int[] nums) {
      if(nums == null || nums.length == 0){
        return 0;
      }

      int maxLength = 1;
      int currentLength = 1;

      for(int i=1; i<nums.length; i++){
        if(nums[i] >nums[i-1]){
            currentLength++;
        }else{
            maxLength = Math.max(maxLength , currentLength);
            currentLength = 1;
        }
      }
      maxLength = Math.max(maxLength , currentLength);
      return maxLength;
    }
}
