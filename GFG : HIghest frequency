GFG : Sort Element by Decreasing Frequency 

Sort Elements by Decreasing Frequency
Difficulty: MediumAccuracy: 44.93%Submissions: 80K+Points: 4
Given an array of integers arr[], sort the array according to the frequency of elements, i.e. elements that have higher frequency comes first. If the frequencies of two elements are the same, then the smaller number comes first.

Examples :

Input: arr[] = [5, 5, 4, 6, 4]
Output: [4, 4, 5, 5, 6]
Explanation: The highest frequency here is 2. Both 5 and 4 have that frequency. Now since the frequencies are the same the smaller element comes first. So 4 4 comes first then comes 5 5. Finally comes 6. The output is 4 4 5 5 6.
Input: arr[] = [9, 9, 9, 2, 5]
Output: [9, 9, 9, 2, 5]
Explanation: The highest frequency here is 3. Element 9 has the highest frequency So 9 9 9 comes first. Now both 2 and 5 have the same frequency. So we print smaller elements first. The output is 9 9 9 2 5.
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i]≤ 105

class Solution {
    // Function to sort the array according to frequency of elements.
    public ArrayList<Integer> sortByFreq(int arr[]) {
        // add your code here
   // Step 1: Frequency count using a HashMap
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : arr) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Convert the map into a list and sort
        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(freqMap.entrySet());

        // Sorting by frequency (high to low) and by element value (low to high) if frequencies are same
        list.sort((a, b) -> {
            if (a.getValue() == b.getValue()) {
                return a.getKey() - b.getKey();  // If freq is same, smaller number first
            }
            return b.getValue() - a.getValue(); // Higher frequency first
        });

        // Step 3: Construct the result based on sorted list
        ArrayList<Integer> result = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : list) {
            int num = entry.getKey();
            int freq = entry.getValue();
            for (int i = 0; i < freq; i++) {
                result.add(num);  // Add the element 'freq' times
            }
        }

        return result;  // Return the final sorted list
    }
}
