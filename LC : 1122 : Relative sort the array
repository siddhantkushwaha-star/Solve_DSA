1122. Relative Sort Array
Solved
Easy
Topics
premium lock icon
Companies
Hint
Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]
Example 2:

Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
Output: [22,28,8,6,17,44]
 

Constraints:

1 <= arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
All the elements of arr2 are distinct.
Each arr2[i] is in arr1.



Solution : 

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
         // Count frequency of elements in arr1
        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : arr1) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }

        List<Integer> result = new ArrayList<>();

        // Add elements in the order of arr2
        for (int num : arr2) {
            int count = freq.get(num);
            for (int i = 0; i < count; i++) {
                result.add(num);
            }
            freq.remove(num); // remove added element
        }

        // Remaining elements not in arr2
        List<Integer> remaining = new ArrayList<>();
        for (int num : freq.keySet()) {
            int count = freq.get(num);
            for (int i = 0; i < count; i++) {
                remaining.add(num);
            }
        }

        // Sort the remaining elements
        Collections.sort(remaining);

        // Add to result
        result.addAll(remaining);

        // Convert to array
        int[] resArr = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            resArr[i] = result.get(i);
        }

        return resArr;
    }
} 
