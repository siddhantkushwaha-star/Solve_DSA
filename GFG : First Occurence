GFG : First Occuerence

First Occurence
Difficulty: BasicAccuracy: 46.9%Submissions: 189K+Points: 1Average Time: 20m
Find the first occurrence of the string pat in the string txt. The function returns an integer denoting the first occurrence of the string pat in txt (0-based indexing).

Note: You are not allowed to use the inbuilt function. If there is no occurrence then return -1.

Examples :

Input: txt = "GeeksForGeeks", pat = "Fr"
Output: -1
Explanation: Fr is not present in the string GeeksForGeeks as substring.
Input: txt = "GeeksForGeeks", pat = "For"
Output: 5
Explanation: For is present as substring in GeeksForGeeks from index 5 (0 based indexing).
Input: txt = "GeeksForGeeks", pat = "gr"
Output: -1
Explanation: gr is not present in the string GeeksForGeeks as substring.
Constraints:
1 <= txt.size(),pat.size() <= 1000

Solution :



class Solution {
    // Function to locate the occurrence of the string x in the string s.
    int firstOccurence(String txt, String pat) {
        // Your code here
        int n = txt.length();
        int m = pat.length();

        if (m > n) return -1; // If pattern is larger than text, no match is possible

        // Compute LPS (Longest Prefix Suffix) array
        int[] lps = computeLPS(pat);
        int i = 0, j = 0; // i -> txt index, j -> pat index

        while (i < n) {'
            if (txt.charAt(i) == pat.cha'rAt(j)) {
                i++;
                j++;
            }
            if (j == m) { // If full pattern is matched
                return i - j; // Return start index of pattern in text
            } else if (i < n && txt.charAt(i) != pat.charAt(j)) {
                if (j != 0) {
                    j = lps[j - 1]; // Move j back using LPS array
                } else {
                    i++; // Move i when j is already at 0
                }
            }
        }
        return -1; // Pattern not found
    }

    // Compute LPS (Longest Prefix Suffix) array
    private int[] computeLPS(String pat) {
        int m = pat.length();
        int[] lps = new int[m];
        int len = 0; // Length of the previous longest prefix suffix
        int i = 1;

        while (i < m) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1]; // Reduce len and try again
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
