GFG : Find Duplicates

Find duplicates in O(n) time and O(n) extra space
Last Updated : 24 Dec, 2024
Given an array arr[] of n elements that contains elements from 0 to n-1, with any of these numbers appearing any number of times. The task is to find the repeating numbers.

Note: The repeating element should be printed only once.

Example: 

Input: n = 7, arr[] = [1, 2, 3, 6, 3, 6, 1]
Output: 1, 3, 6
Explanation: The numbers 1 , 3 and 6 appears more than once in the array.


Input : n = 5, arr[] = [1, 2, 3, 4 ,3]
Output: 3
Explanation: The number 3 appears more than once in the array.



import java.util.*;

class GfG {

    static List<Integer> findDuplicates(Integer[] arr) {

        // Step 1: Create an empty hashmap to store
        // element frequencies
        int n = arr.length;
        Map<Integer, Integer> freqMap = new HashMap<>();
        List<Integer> result = new ArrayList<>();

        // Step 2: Iterate through the array and
        // count element frequencies
        for (int i = 0; i < n; i++) {
            freqMap.put(arr[i],
                        freqMap.getOrDefault(arr[i], 0)
                            + 1);
        }

        // Step 3: Iterate through the hashmap to find
        // duplicates
        for (Map.Entry<Integer, Integer> entry :
             freqMap.entrySet()) {
            if (entry.getValue() > 1) {
                result.add(entry.getKey());
            }
        }

        // Step 4: If no duplicates found, add -1 to the
        // result
        if (result.isEmpty()) {
            result.add(-1);
        }

        // Step 6: Return the result list containing
        // duplicate elements or -1
        return result;
    }

    public static void main(String[] args) {

        Integer[] arr = { 1, 6, 5, 2, 3, 3, 2 };
        List<Integer> duplicates = findDuplicates(arr);

        for (int element : duplicates) {
            System.out.print(element + " ");
        }
    }
}
